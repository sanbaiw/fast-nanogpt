# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/pt3-activition.ipynb.

# %% auto 0
__all__ = ['set_seed', 'DataSet', 'Hook', 'Hooks', 'HooksCallback', 'append_stats']

# %% ../nbs/pt3-activition.ipynb 1
import random, math, torch, numpy as np, matplotlib.pyplot as plt
from .learner import *
from .model import *
import fastcore.all as fc
from functools import partial

# %% ../nbs/pt3-activition.ipynb 3
def set_seed(seed, deterministic=False):
    torch.use_deterministic_algorithms(deterministic)
    torch.manual_seed(seed)
    random.seed(seed)
    np.random.seed(seed)

# %% ../nbs/pt3-activition.ipynb 5
class DataSet:
    def __init__(self, tokens, T=32):
        self.tokens = tokens
        self.T = T

    def __len__(self):
        return (len(self.tokens) - 1) // self.T

    def __getitem__(self, i):
        x = self.tokens[i * self.T : (i + 1) * self.T]
        y = self.tokens[i * self.T + 1 : (i + 1) * self.T + 1]
        return x, y

# %% ../nbs/pt3-activition.ipynb 10
class Hook:
    def __init__(self, m, f):
        self.hook = m.register_forward_hook(partial(f, self))
        # print(self.hook, m)

    def remove(self):
        self.hook.remove()

    def __del__(self):
        self.remove()

# %% ../nbs/pt3-activition.ipynb 12
class Hooks(list):
    def __init__(self, ms, f):
        super().__init__([Hook(m, f) for m in ms])

    def __enter__(self, *args):
        return self

    def __exit__(self, *args):
        self.remove()

    def __del__(self):
        self.remove()

    def __delitem__(self, i):
        self[i].remove()
        super().__delitem__(i)

    def remove(self):
        for h in self:
            h.remove()

# %% ../nbs/pt3-activition.ipynb 13
class HooksCallback(Callback):
    def __init__(
        self, hookfunc, mod_filter=fc.noop, on_train=True, on_valid=False, mods=None
    ):
        fc.store_attr()
        super().__init__()

    def before_fit(self, learn):
        if self.mods:
            mods = self.mods
        else:
            mods = fc.filter_ex(learn.model.modules(), self.mod_filter)
        self.hooks = Hooks(mods, partial(self._hookfunc, learn))

    def _hookfunc(self, learn, *args, **kwargs):
        if (self.on_train and learn.training) or (self.on_valid and not learn.training):
            self.hookfunc(*args, **kwargs)

    def after_fit(self, learn):
        self.hooks.remove()

    def __iter__(self):
        return iter(self.hooks)

    def __len__(self):
        return len(self.hooks)

# %% ../nbs/pt3-activition.ipynb 14
def append_stats(hook, mod, inp, outp):
    if not hasattr(hook, "stats"):
        hook.stats = ([], [], [])
    acts = to_cpu(outp)
    hook.stats[0].append(acts.mean())
    hook.stats[1].append(acts.std())
    hook.stats[2].append(acts.abs().histc(40, 0, 10))
